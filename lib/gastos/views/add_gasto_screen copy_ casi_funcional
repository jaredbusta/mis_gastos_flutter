import 'dart:io';

import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:generic_bloc_provider/generic_bloc_provider.dart';
import 'package:mis_gastos/User/bloc/user_bloc.dart';
import 'package:mis_gastos/gastos/model/gasto_model.dart';
// import 'package:mis_gastos/gastos/widget/dropdown_categoria.dart';

import 'package:mis_gastos/screens/card_image.dart';
import 'package:mis_gastos/screens/gradient_back.dart';

import 'package:mis_gastos/screens/widgets/button_color.dart';
import 'package:mis_gastos/screens/widgets/input_icon.dart';
// import 'package:mis_gastos/screens/widgets/text_input.dart';
import 'package:mis_gastos/screens/widgets/title_header.dart';

class AddGastoScreen extends StatefulWidget {
  File? image;

  AddGastoScreen({Key? key, this.image}) : super(key: key);
  late UserBloc blocUser;
  @override
  State<AddGastoScreen> createState() => _AddGastoScreenState();
}

class _AddGastoScreenState extends State<AddGastoScreen> {
  @override
  DateTime dateTime = DateTime.now();
  late String categoria_tag = "Transporte";
  final items_categoria = [
    'Transporte',
    'Eventual',
    'Alimentacion',
    'Servicio',
    'Carro',
    'Otros gastos',
  ];

  Widget build(BuildContext context) {
    widget.blocUser = BlocProvider.of(context);
    // categoria_tag = "transporte";
    final hours = dateTime.hour.toString().padLeft(2, "0");
    final minute = dateTime.minute.toString().padLeft(2, "0");

    final _controllerConcepto = TextEditingController();
    final _controllerDescripcion = TextEditingController();
    final _controllerImporte = TextEditingController(text: "0");
    // final _controllerCategoria = TextEditingController(text: "nada");
    final _controllerFoto = TextEditingController();
    final _controllerUbicacion = TextEditingController();
    GlobalKey _formKey = GlobalKey();

    return Scaffold(
      body: Stack(
        children: [
          GradientBack(
            title: "",
            height: 250,
            color1: "#F19494",
            color2: "#E76868",
          ),
          Row(
            children: [
              Container(
                padding: EdgeInsets.only(top: 25, left: 5),
                child: SizedBox(
                  height: 45,
                  width: 45,
                  child: IconButton(
                    icon: Icon(
                      Icons.keyboard_arrow_left,
                      color: Colors.white,
                      size: 45,
                    ),
                    onPressed: () {
                      Navigator.pop(context);
                    },
                  ),
                ),
              ),
              Flexible(
                  child: Container(
                padding: EdgeInsets.only(top: 40, left: 20, right: 10.0),
                child: TitleHeader(title: "Nuevo gastos"),
              )),
            ],
          ),
          Container(
            margin: EdgeInsets.only(top: 0),
            alignment: Alignment.topCenter,
            child: CardImage(
              height: 250,
              width: 170,
              iconData: Icons.camera,
              pathImage: widget.image?.path,
              onPressed: () => print("botonazo a la camara"),
            ),
          ),
          Container(
              margin: EdgeInsets.only(
                top: 330,
              ),
              child: ListView(
                children: [
                  Form(
                    key: _formKey,
                    // autovalidateMode: AutovalidateMode.disabled,
                    child: Column(
                      children: [
                        Container(
                          margin:
                              EdgeInsets.only(left: 20, right: 20, bottom: 10),
                          child: TextFormField(
                            decoration: const InputDecoration(
                                icon: Icon(Icons.text_fields),
                                labelText: "Concepto",
                                border: OutlineInputBorder()),
                            controller: _controllerConcepto,
                            validator: (value) {
                              if (value!.isEmpty) {
                                return 'Por favor ingresa el concepto';
                              }
                            },
                          ),
                        ),
                        Container(
                          margin:
                              EdgeInsets.only(left: 20, right: 20, bottom: 10),
                          child: TextFormField(
                              decoration: const InputDecoration(
                                  icon: Icon(Icons.list_outlined),
                                  labelText: "Descripcion",
                                  border: OutlineInputBorder()),
                              controller: _controllerDescripcion),
                        ),
                        Container(
                          margin:
                              EdgeInsets.only(left: 20, right: 20, bottom: 10),
                          child: TextFormField(
                            keyboardType: TextInputType.number,
                            inputFormatters: [
                              FilteringTextInputFormatter.digitsOnly,
                              LengthLimitingTextInputFormatter(7)
                            ],
                            decoration: const InputDecoration(
                                icon: Icon(Icons.attach_money_outlined),
                                labelText: "Importe",
                                border: OutlineInputBorder()),
                            controller: _controllerImporte,
                          ),
                        ),
                        Container(
                          margin:
                              EdgeInsets.only(left: 20, right: 20, bottom: 10),
                          child: Row(
                            children: [
                              Expanded(
                                  child: ElevatedButton(
                                      onPressed: () async {
                                        final date = await pickDate();
                                        if (date == null) return;
                                        dateTime = date;
                                        // setState(() => dateTime = date);
                                      },
                                      child: Text(
                                          '${dateTime.day}/ ${dateTime.month}/${dateTime.year}'))),
                              SizedBox(width: 12),
                              Expanded(
                                  child: ElevatedButton(
                                      onPressed: () async {
                                        final time = await pickTime();
                                        if (time == null) return;
                                        final newDateTime = DateTime(
                                            dateTime.year,
                                            dateTime.month,
                                            dateTime.day,
                                            time.hour,
                                            time.minute);
                                        dateTime = newDateTime;
                                        // setState(() => dateTime = newDateTime);
                                      },
                                      child: Text('$hours: $minute'))),
                            ],
                          ),
                        ),
                        Container(
                          margin:
                              EdgeInsets.only(left: 20, right: 20, bottom: 10),
                          child: DropdownButtonHideUnderline(
                            child: DropdownButton2(
                              isExpanded: true,
                              hint: Row(
                                children: const [
                                  Icon(
                                    Icons.list,
                                    size: 16,
                                    color: Colors.yellow,
                                  ),
                                  SizedBox(
                                    width: 4,
                                  ),
                                  Expanded(
                                    child: Text(
                                      'Select Item',
                                      style: TextStyle(
                                        fontSize: 14,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.yellow,
                                      ),
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ],
                              ),
                              items: items_categoria
                                  .map((item) => DropdownMenuItem<String>(
                                        value: item,
                                        child: Text(
                                          item,
                                          style: const TextStyle(
                                            fontSize: 14,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.white,
                                          ),
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ))
                                  .toList(),
                              value: categoria_tag,
                              onChanged: (value) {
                                setState(() {
                                  categoria_tag = value as String;
                                });
                              },
                              icon: const Icon(
                                Icons.arrow_forward_ios_outlined,
                              ),
                              iconSize: 14,
                              iconEnabledColor: Colors.yellow,
                              iconDisabledColor: Colors.grey,
                              buttonHeight: 50,
                              buttonWidth: MediaQuery.of(context).size.width,
                              buttonPadding:
                                  const EdgeInsets.only(left: 14, right: 14),
                              buttonDecoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(14),
                                border: Border.all(
                                  color: Colors.black26,
                                ),
                                color: Colors.redAccent,
                              ),
                              buttonElevation: 2,
                              itemHeight: 40,
                              itemPadding:
                                  const EdgeInsets.only(left: 14, right: 14),
                              dropdownMaxHeight: 200,
                              dropdownWidth: 200,
                              dropdownPadding: null,
                              dropdownDecoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(14),
                                color: Color.fromARGB(255, 255, 123, 123),
                              ),
                              dropdownElevation: 8,
                              scrollbarRadius: const Radius.circular(40),
                              scrollbarThickness: 6,
                              scrollbarAlwaysShow: true,
                              offset: const Offset(-20, 0),
                            ),
                          ),
                        ),
                        InputIcon(
                          controller: _controllerUbicacion,
                          hintText: "Ubicación",
                          inputType: TextInputType.text,
                          iconData: Icons.location_on,
                        ),
                        ButtonColor(
                            width: MediaQuery.of(context).size.width,
                            height: 50,
                            text: "Guardar gasto",
                            color1: "#F19494",
                            color2: "#E76868",
                            onPressed: () => guardarGasto(
                                GastoModel(
                                    concepto: _controllerConcepto.value.text,
                                    descripcion:
                                        _controllerDescripcion.value.text,
                                    fecha: dateTime,
                                    importe: double.parse(
                                        _controllerImporte.value.text),
                                    categoria: categoria_tag),
                                context),
                            textColor: "#FFFFFF"),
                      ],
                    ),
                  ),
                ],
              ))
        ],
      ),
    );
  }

  void guardarGasto(GastoModel gasto, BuildContext context) {
    print(gasto.toMap());
    //1. guardar la imagehn si existe al firestore

    //2. CloudFirestore se guarda los datos del gasto
    // este funciona !!
    // widget.blocUser
    //     .updateGastoData(gasto)
    //     .whenComplete(() => Navigator.pop(context));
  }

  void clickCategoria(String categoria) {
    categoria_tag = categoria;
    // setState(() {
    print(categoria_tag);
    // });
  }

  DropdownMenuItem<String> buildMenuItem(String item) => DropdownMenuItem(
      value: item,
      child: Text(
        item,
        style: TextStyle(fontWeight: FontWeight.bold, fontSize: 20),
      ));

  Future<DateTime?> pickDate() => showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2022),
      lastDate: DateTime(2100));

  Future<TimeOfDay?> pickTime() =>
      showTimePicker(context: context, initialTime: TimeOfDay.now());
}
